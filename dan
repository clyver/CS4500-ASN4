#!/usr/bin/python
import sys
import os
import sndhdr
import wave
import tempfile
import pdb
import numpy as np
from scipy.io import wavfile
from numpy.fft import fft


# Global Constants
_NUMBER_MATCHES_NEEDED = 50
_TEMP_DIR_PATH = "/tmp/HGML"

"""
This is our dan file.  It is our second attempt at accomplishing our semester
project.  In this script you will find command line argument handling, an
audio comparator, along with the parsing of wav/mp3 audio files and directories
"""

# We may be making some files that we'll want put in tmp/HGML
# H.G.M.L Stands for Hsie, Georgescu, Manser, Lyver, the last names of the devs
# This is funny because it sounds like HTML
if not os.path.exists(_TEMP_DIR_PATH):
	os.makedirs(_TEMP_DIR_PATH)

"""
We're going to create a dictionary for each data input
key: file_name, value: audio_data
"""
data1_dict = {}
data2_dict = {}

# *****Some helpers before we get down to business:*****

def is_mp3(f, directory=""):
	"""
	Takes a file name f and a string directory path
	Returns true or false based on mp3 format or not
	"""
	# Get the proper path
	if directory:
                # Make sure we add a '/' if needed
                f = directory + f if directory.endswith('/')\
		    else directory + '/' + f

	result = sndhdr.what(f)
	# MP3s should not return a result. We alse want '.mp3' on the end 
	return not result and f.endswith(".mp3")

def is_ogg(f):
	# Return True if this file has the .ogg file tag
	return f.endswith(".ogg")

def is_wav(f, directory=''):
	"""
	Given this path, True if ends in .wav, and data reads as wav
	If there is an input directory, update the path
	"""
       
	# Get the proper path 
	if directory:
                # Make sure we add a '/' if needed
                f = directory + f if directory.endswith('/')\
                    else directory + '/' + f	

	result = sndhdr.what(f)
	return f.endswith('.wav') and 'wav' in result

def ogg_to_wav(f, directory=""):
	"""
	Given an ogg file, convert to wav with Linux's oggdec.
	Create the new file in the /tmp directory
	"""

	# Check the validity of the path
	if directory:
                # Make sure we add a '/' if needed
                f = directory + f if directory.endswith('/')\
		    else directory + '/' + f

	# Generate out paths correctly
	just_file = short(f) + ".wav"
	ogg_path = _TEMP_DIR_PATH + "/" + just_file
	try:
		os.system("oggdec --quiet -o {f1} {f2}"\
			.format(f1=ogg_path, f2=f))
		return ogg_path
	except:
		print >> sys.stderr,\
		 "{ogg} is not in a supported format".format(ogg=f)
		sys.exit(1)

def short(path):
	"""
	Return the name of the file without any path
	"""
	if '/' in path:
        	return path.rsplit('/', 1)[1]
	else:
		return path

def check_dir_files(directory):
	"""
	We want to ensure that there are no nested directories in this dir
	"""

	dir_content = os.listdir(directory)
	for elem in dir_content:
		if directory:
                	# Make sure we add a '/' if needed
                	elem = directory + elem if directory.endswith('/')\
                    		else directory + '/' + elem
		# If we come across a directory, break
		if not os.path.isfile(elem):
			return False
	return True

def reduce_output(path):
	"""
	Ensure we print out the correct file paths
	In particular, if we have a converted file, "test.mp3.wav",
	we want to return test.wav, disregarding that it was converted
	"""
	if (".wav" in path and ".mp3" in path) or\
		 (".wav" in path and ".ogg" in path):
		path = path[:-4]
	return path
		

def mp3_to_wav(f, directory=""):
	"""
	Given this mp3 file, convert it to wav in the /tmp/ dir.
	Return the new path to that file
	"""

	# Ensure our path is correct for this file
	if directory:
                # Make sure we add a '/' if needed
                f = directory + f if directory.endswith('/')\
			 else directory + '/' + f
	
	just_file = short(f) + ".wav"
	mp3_path = _TEMP_DIR_PATH + "/" + just_file
	
	# Create this audio's wav file in the /tmp/ dir

	os.system("/course/cs4500f14/bin/lame --decode --silent {file} \
		 {new_name}".format(file=f, new_name=mp3_path))	
	# Add this file to the list of files we've made so far	
	return mp3_path


def file_handler(f, directory=""):
	"""
	Given a file, return its fingerprint as a list of hashes
	"""	

	# Normalize this file.  Chunk it up.  Call fft on chunks.  

	if not "tmp" in f and directory:
                # Make sure we add a '/' if needed
                f = directory + f if directory.endswith('/')\
			 else directory + '/' + f
	
	# Standardize .wav file by converting to .mp3 then returning to .wav
	mp3_path = _TEMP_DIR_PATH + "/" + short(f)
	#print mp3_path
	try:
		os.system("/course/cs4500f14/bin/lame --silent\
	 		--resample 44.1 -a {fl} {new_name}"\
			.format(fl=f, new_name=mp3_path+".mp3"))
	except:
		print >> sys.stderr, "unsuccessful conversion in file_handler wav to mp3"
		sys.exit(1)

	try:
		os.system("/course/cs4500f14/bin/lame --silent --decode {f1} \
		{fname}".format(f1=mp3_path+".mp3", fname=mp3_path))
	except:
		print >> sys.stderr, "unsuccessful conversion in file_handler mp3_to_wav"	

	# Get the data out of the file we just normalized
	f_sample_rate, f_wav_data = wavfile.read(mp3_path)
	# Chunk it up into sub lists of len 4096 (fft likes base 2)
	f_chunked = list(zip(*[iter(f_wav_data)]*4096))

	# fft_bands is a list of lists, where each sublist represents 1/10 of a second
        # in the time domain and contains 8 numbers which are the sums across 8 
        # frequency bins for that time of fft
        fft_bands = []
        for chunk in f_chunked:
                fft_chunk = fft(chunk)
                abs_val = np.abs(fft_chunk)**2
                band = list(zip(*[iter(abs_val)]*512))
                sums = []
                for ban in band:
                        sum_of_one_band = np.sum(ban)
                        sums.append(sum_of_one_band)
                fft_bands.append(sums)

        # List of hashes for each 1/10 of second. calculated by
        # multiplying each of 8 
        list_of_hashes = []
        smaller = 1000000000
        for sublist in fft_bands:
                index0 = (sublist[0]*2)/smaller
                index1 = (sublist[1]*127)/smaller
                index2 = (sublist[2]*283)/smaller
                index3 = (sublist[3]*467)/smaller
                index4 = (sublist[4]*661)/smaller
                index5 = (sublist[5]*877)/smaller
                index6 = (sublist[6]*1087)/smaller
                index7 = (sublist[7]*1297)/smaller

                total = index0 + index1 + index2 + index3 + index4 + index5 + index6 + index7
                list_of_hashes.append(total)

        return list_of_hashes


def check_type(f, directory=""):
	ogg = False
        mp3 = False
        wav = False
        if is_ogg(f):
                ogg = True
                f = ogg_to_wav(f, directory)
        elif is_mp3(f, directory):
                mp3 = True
                f = mp3_to_wav(f, directory)
        elif is_wav(f, directory):
                wav = True
        if any((ogg, mp3, wav)):
		return f
	else:
		False

def get_match_index(max1, l2):
	# Check if this max is present in l2, if so return the index in l2
	i = 0
	while i < len(l2):
		if abs(max1 - l2[i]) < 2000000:
			return i
		else:
			i += 1
	return -1


def matches(p1, p2, threshold):
	# We determine if these two points are close enough, as per threshold
	return abs(p1 - p2) <= threshold


"""
	This is a helper function to check_sequence.
	Takes a save_ptr of a list of chunks and
	returns the time in seconds where the save_ptr
	resides assuming that chunks are 0.1 seconds long
"""
def ptr_to_time(sp):
	return sp * 0.1


def check_sequence(l1, l2):
	"""
	Given two lists of hashes, where index of each list represents 1/10th second
	of song data, and hash represents fingerprint
	Return a tuple of (BOOLEAN, NUMBER, NUMBER) where bool is true if match
	of 5 seconds of song is found between l1 and l2, false if no match.
	if match, first number is where in seconds the match starts in l1
	while the second number is where in seconds the match starts in l2
	else both numbers are null/empty/none.
	"""
	# Initialize our return value to False
	return_value = (False, None, None)
	
	# Initialize the max distance between hashes we will accept as a MATCH
	thresh_distance = 980000000

	# Initialize save flag as true
	# save flag determines the start of a match, used to get match times
	save_flag = True
	
	# Keep track of where we are in l1 and l2 with pointers
	# Initialize to 0 because we start at the beginning of each list
	l1_ptr = 0
	l2_ptr = 0

	# Initialize offsets to keep track of persistance of matches between chunks
	offset_ptr = 0

	# Check for matches of l1 to "first" chunk of l2
	while (l1_ptr < len(l1)):

		# If there is less than 5 seconds left in l1 then break out
		if ((len(l1) - l1_ptr) < _NUMBER_MATCHES_NEEDED):
			break
		
		# Check for matches of l2 to "first" chunk of l2
		while (l2_ptr < len(l2)):

			# If there is less than 5 sec left in l2 then break
			if((len(l2) - l2_ptr) < _NUMBER_MATCHES_NEEDED):
				break

			# If the distance between hashes is within our threshold then..
			if (abs(l1[l1_ptr] - l2[l2_ptr]) < thresh_distance):
			
				# Record where l1_pointer and l2_pointer are within l1 and l2
				if(save_flag):
					save_l1 = l1_ptr
					save_l2 = l2_ptr
					# Do not look to save upon match
					save_flag = False

				# increment offset_ptr
				offset_ptr += 1
				
				#pdb.set_trace()
				#print offset_ptr				

				# if we have satisfied 5 seconds of matching..
				if (offset_ptr >= _NUMBER_MATCHES_NEEDED):
					
					# set return_value, true and get times of saves
					return_value = (True, \
							ptr_to_time(save_l1),\
							ptr_to_time(save_l2))
			
			# Else we have non-persistant matching, reset
			elif(not save_flag):
	
				# Reset save flags to time 0
				save_l1 = 0
				save_l2 = 0
				# Look to create save flags upon match
				save_flag = True
				# Reset offset_ptr to 0
				offset_ptr = 0
			
			# Increment l2_ptr
			l2_ptr += 1
		
		# Increment l1_ptr		
		l1_ptr += 1
	
	return return_value

def dir_breakdown(input_dir, respective_dict):
	"""
	Breakdown this dir. Iterate over the files. Check for propper formats.
	If the file is good, add its data to the respective dictioanary
	"""

	# Make sure this directory contains only files
	if not check_dir_files(input_dir):
		print >> sys.stderr, "ERROR: {dir} has a nested directory" \
					.format(dir=input_dir)
		sys.exit(1)

	# Go through the dir's files and ensure all are either wav or mp3
        dir_files = os.listdir(input_dir)
	for f in dir_files:
                # Check  to see if this file is a wav, convert if needed
	
		good_file = check_type(f, input_dir)	
        	
		if good_file:        
			try:
                        	song_data = file_handler(good_file, input_dir)
                        	respective_dict[f] = song_data
                	except:
                        	print >> sys.stderr,\
			 	 "ERROR: {f}'s format\
					 is not supported".format(f=f)
			 	sys.exit(1)
		else:
			print >> sys.stderr,\
			"ERROR: {f}'s format is not supported".format(f=f)
        		sys.exit(1)

#  Remove /tmp/HGML/ that we created
def delete_HGMLtmp_dir():
	os.system("rm -r {tmpdir}".format(tmpdir=_TEMP_DIR_PATH))


#########################################################################
###################### End of Helper Functions ##########################
#########################################################################


"""Analyze the command line arguments.  Must be in form:
	./dan <-f|-d> <file|dir> <-f|-d> <file|dir>
"""
if len(sys.argv) != 5 or \
   (sys.argv[1] != '-f' and sys.argv[1] != '-d') or \
   (sys.argv[3] != '-f' and sys.argv[3] != '-d'):
        print >>sys.stderr, "ERROR: incorrect command line."
        sys.exit(1)
# We've done a basic analysis of our input. Set our inputs to a variables
flag1 = sys.argv[1]
data1 = sys.argv[2]
flag2 = sys.argv[3]
data2 = sys.argv[4]

# Let's make sure the provided flags (-f|-d) match the corresponfing input
if flag1 == "-d" and not os.path.isdir(data1):
	print >> sys.stderr, \
	 "ERROR: {arg} is not a directory".format(arg=data1)
	sys.exit(1)
if flag2 == "-d" and not os.path.isdir(data2):
	print >> sys.stderr, \
	 "ERROR: {arg} is not a directory".format(arg=data2)
        sys.exit(1)
if flag1 == '-f' and not os.path.isfile(data1):
        print >> sys.stderr, \
	 "ERROR: {arg} is not a file".format(arg=data1)
        sys.exit(1)

if flag2 == '-f' and not os.path.isfile(data2):
        print >> sys.stderr, \
	 "ERROR: {arg} is not a file".format(arg=data2)
        sys.exit(1)

"""
Now that we know our input is in the correct format, ensure all files are
either wav or mp3 files.   
"""
# Let's know when we are dealing with dirs by asking
data1_is_dir = os.path.isdir(data1)
data2_is_dir = os.path.isdir(data2)

# If dir, hand it off. If it'a a file, call file_handler directly		
if data1_is_dir:
	dir_breakdown(data1, data1_dict)
else:
	# Good input will return the path to the file if it is in good form
	# If data1 is not in a propper format it will return false 
	good_file = check_type(data1)
	if good_file:
		song_data = file_handler(good_file)
		data1_dict[data1] = song_data
	else:
		# This file is not in a supported format
		print >> sys.stderr,\
                         "ERROR: {f}'s format is not supported".format(f=data1)
                sys.exit(1)

if data2_is_dir:
	dir_breakdown(data2, data2_dict)
else:
	good_file = check_type(data2)
        if good_file:
                song_data = file_handler(good_file)
                data2_dict[data2] = song_data

	else:
                # This file is not in a supported format
                print >> sys.stderr,\
                         "ERROR: {f}'s format is not supported".format(f=data2)
                sys.exit(1)

# ***At this point we have our dicts filled with the data we'll be comparing 

"""
# Test code to check the validity of our dictionary keys 
print "data1_dict keys: "
for key in data1_dict.keys():
	print "-", key
print "data2_dict_keys: "
for key in data2_dict.keys():
	print"-", key
"""

# Go through the keys of the data1_dict and compare them to the others
data1_keys = data1_dict.keys()
data2_keys = data2_dict.keys()

# Create a list of what we found already 
found_so_far = []
for key1 in data1_keys:
	for key2 in data2_keys:
		pair = set((key1, key2))
		if pair not in found_so_far: 
			data1_value = data1_dict[key1]
			data2_value = data2_dict[key2]
			compare_vals = check_sequence(data1_value,\
						      data2_value)
			if compare_vals[0]:
				print "MATCH", \
				 reduce_output(short(key1)), \
				 reduce_output(short(key2)), \
				 compare_vals[1], compare_vals[2]
				found_so_far.append(pair) 

# remove /tmp/HGML/
delete_HGMLtmp_dir()

# Exit with an exit code of 0
sys.exit(0)
